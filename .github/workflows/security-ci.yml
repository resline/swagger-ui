name: Security-Enhanced CI/CD

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  security-lint:
    name: Security Linting and Static Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Hadolint (Dockerfile linting)
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Dockerfile
        failure-threshold: warning

    - name: Run Trivy vulnerability scanner in repo mode
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run TruffleHog OSS for secret scanning
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  build-and-security-scan:
    name: Build and Security Scan
    runs-on: ubuntu-latest
    needs: security-lint
    
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Docker buildx
      uses: docker/setup-buildx-action@v3

    - name: Log into registry ${{ env.REGISTRY }}
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        load: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: Run Trivy vulnerability scanner on image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-image-results.sarif'

    - name: Upload Trivy image scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-image-results.sarif'

    - name: Run container security benchmark
      run: |
        # Run the container for testing
        docker run -d --name test-container --read-only --tmpfs /tmp --tmpfs /var/run --tmpfs /var/cache/nginx ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        sleep 10
        
        # Test health endpoint
        docker exec test-container curl -f http://localhost:8080/health
        
        # Test main application
        docker exec test-container curl -f http://localhost:8080/
        
        # Check if running as non-root
        docker exec test-container sh -c 'id -u' | grep -v '^0$' || (echo "Container running as root!" && exit 1)
        
        # Clean up
        docker stop test-container
        docker rm test-container

    - name: Generate SBOM with Syft
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: spdx-json
        output-file: sbom.spdx.json

    - name: Upload SBOM as artifact
      uses: actions/upload-artifact@v4
      with:
        name: sbom-${{ github.sha }}
        path: sbom.spdx.json

    - name: Push Docker image
      if: github.event_name != 'pull_request'
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Sign container image with Cosign
      if: github.event_name != 'pull_request'
      uses: sigstore/cosign-installer@v3
      
    - name: Sign the container image
      if: github.event_name != 'pull_request'
      env:
        COSIGN_EXPERIMENTAL: 1
      run: |
        echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign --yes {}@${{ steps.build.outputs.digest }}

  security-compliance:
    name: Security Compliance Checks
    runs-on: ubuntu-latest
    needs: build-and-security-scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Docker Bench Security
      run: |
        docker run --rm --net host --pid host --userns host --cap-add audit_control \
          -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \
          -v /etc:/etc:ro \
          -v /var/lib:/var/lib:ro \
          -v /var/run/docker.sock:/var/run/docker.sock:ro \
          -v /usr/lib/systemd:/usr/lib/systemd:ro \
          -v /etc/systemd:/etc/systemd:ro \
          --label docker_bench_security \
          docker/docker-bench-security

    - name: CIS Kubernetes Benchmark (if applicable)
      if: contains(github.ref, 'k8s') || contains(github.ref, 'kubernetes')
      run: |
        # Run kube-bench for CIS Kubernetes Benchmark
        docker run --rm -v `pwd`:/host aquasec/kube-bench:latest --config-dir /host/k8s-config

  performance-test:
    name: Performance and Load Testing
    runs-on: ubuntu-latest
    needs: build-and-security-scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Start application stack
      run: |
        docker-compose up -d swagger-ui
        sleep 30

    - name: Install artillery for load testing
      run: npm install -g artillery

    - name: Run load tests
      run: |
        cat > load-test.yml << EOF
        config:
          target: 'http://localhost:8080'
          phases:
            - duration: 60
              arrivalRate: 10
        scenarios:
          - name: "Health check"
            requests:
              - get:
                  url: "/health"
          - name: "Main application"
            requests:
              - get:
                  url: "/"
        EOF
        artillery run load-test.yml

    - name: Cleanup
      run: docker-compose down

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [security-compliance, performance-test]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Deploy to staging environment
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [security-compliance, performance-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Deploy to production environment
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here